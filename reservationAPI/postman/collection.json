{
	"info": {
		"_postman_id": "bc97353c-fe7f-4d8d-8ff1-aea44c3ea721",
		"name": "ReservationAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41851562",
		"_collection_link": "https://group-8-7101.postman.co/workspace/uva-devops-2025-group8~062d955a-9f2f-41a3-b1db-5b4ec3205aec/collection/41851562-bc97353c-fe7f-4d8d-8ff1-aea44c3ea721?action=share&source=collection_link&creator=41851562"
	},
	"item": [
		{
			"name": "1. Create an event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"response must be valid and have a body\", () => {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Response should contain eventId\", () => {",
							"    let response = pm.response.json();",
							"    pm.expect(response).to.have.property(\"eventId\");",
							"});",
							"let response = pm.response.json();",
							"pm.environment.set(\"eventId\", response.eventId);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"eventName\": \"Super bowl\",\n  \"numberOfSeats\": {{numberOfSeats}},\n  \"seatPrice\": 100.15\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/events",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events"
					]
				},
				"description": "Generated from cURL: curl -X 'POST' \\\n  'http://localhost:8080/events' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"eventName\": \"string\",\n  \"numberOfSeats\": 0,\n  \"seatPrice\": 100.15\n}'"
			},
			"response": []
		},
		{
			"name": "2. Reserve tickets on invalid event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"response must be valid and have a body\", () => {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Response body should match expected structure\", () => {",
							"    let response = pm.response.json();",
							"",
							"    pm.expect(response).to.be.an(\"object\");",
							"    pm.expect(response).to.have.property(\"code\", 404);",
							"    pm.expect(response).to.have.property(\"message\", \"Ticket not found\");",
							"    pm.expect(response).to.have.property(\"orderId\").that.is.a(\"string\");",
							"    pm.expect(response).to.have.property(\"tickets\").that.is.null;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"orderId\": \"{{$randomUUID}}\",\n  \"userId\": \"{{$randomUUID}}\",\n  \"eventId\": \"invalid-event-id\",\n  \"ticketIds\": [\n    1\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/reservations",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"reservations"
					]
				},
				"description": "Generated from cURL: curl -X 'POST' \\\n  'http://localhost:8080/reservations' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"orderId\": \"any-workflow-uuid-from-conductor\",\n  \"userId\": \"sivanat-subpaisarn\",\n  \"eventId\": \"invalid-event-id\",\n  \"ticketIds\": [\n    \"1\"\n  ]\n}'"
			},
			"response": []
		},
		{
			"name": "3. Reserve tickets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"response must be valid and have a body\", () => {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Response body should match expected structure\", () => {",
							"    let response = pm.response.json();",
							"",
							"    pm.expect(response).to.be.an(\"object\");",
							"    pm.expect(response).to.have.property(\"code\", 200);",
							"    pm.expect(response).to.have.property(\"message\", \"Tickets reserved successfully\");",
							"    pm.expect(response).to.have.property(\"orderId\").that.is.a(\"string\");",
							"    pm.expect(response).to.have.property(\"tickets\").that.is.an(\"array\").with.lengthOf(2);",
							"",
							"    response.tickets.forEach(ticket => {",
							"        pm.expect(ticket).to.have.property(\"ticketId\").that.is.a(\"number\");",
							"        pm.expect(ticket).to.have.property(\"eventId\").that.is.a(\"string\");",
							"        pm.expect(ticket).to.have.property(\"availability\", \"TICKET_AVAILABILITY_RESERVED\");",
							"        pm.expect(ticket).to.have.property(\"price\").that.is.a(\"number\");",
							"    });",
							"});",
							"pm.environment.set(\"orderId\", pm.response.json()[\"orderId\"])",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"orderId\": \"{{$randomUUID}}\",\n  \"userId\": \"{{$randomUUID}}\",\n  \"eventId\": \"{{eventId}}\",\n  \"ticketIds\": [\n    1,\n    2\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/reservations",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"reservations"
					]
				},
				"description": "Generated from cURL: curl -X 'POST' \\\n  'http://localhost:8080/reservations' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"orderId\": \"any-workflow-uuid-from-conductor\",\n  \"userId\": \"sivanat-subpaisarn\",\n  \"eventId\": \"invalid-event-id\",\n  \"ticketIds\": [\n    \"1\"\n  ]\n}'"
			},
			"response": []
		},
		{
			"name": "4. Reserve unavailable ticket",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"response must be valid and have a body\", () => {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Response body should match expected conflict structure\", () =>  {",
							"    let response = pm.response.json();",
							"",
							"    pm.expect(response).to.be.an(\"object\");",
							"",
							"    pm.expect(response).to.have.property(\"code\", 409);",
							"    pm.expect(response).to.have.property(\"message\", \"Ticket 1 is already reserved\");",
							"    pm.expect(response).to.have.property(\"orderId\").that.is.a(\"string\");",
							"    pm.expect(response).to.have.property(\"tickets\").that.is.null;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"orderId\": \"${{$randomUUID}}\",\n  \"userId\": \"${{$randomUUID}}\",\n  \"eventId\": \"{{eventId}}\",\n  \"ticketIds\": [\n    1,\n    2\n  ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/reservations",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"reservations"
					]
				},
				"description": "Generated from cURL: curl -X 'POST' \\\n  'http://localhost:8080/reservations' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"orderId\": \"any-workflow-uuid-from-conductor\",\n  \"userId\": \"sivanat-subpaisarn\",\n  \"eventId\": \"invalid-event-id\",\n  \"ticketIds\": [\n    \"1\"\n  ]\n}'"
			},
			"response": []
		},
		{
			"name": "5. Release invalid order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"response must be valid and have a body\", () => {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Response body should match expected not found structure\", () =>  {",
							"    let response = pm.response.json();",
							"",
							"    pm.expect(response).to.be.an(\"object\");",
							"",
							"    pm.expect(response).to.have.property(\"code\", 404);",
							"    pm.expect(response).to.have.property(\"message\", \"Order not found\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/reservations/invalid-order-id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"reservations",
						"invalid-order-id"
					]
				},
				"description": "Generated from cURL: curl -X 'POST' \\\n  'http://localhost:8080/reservations' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"orderId\": \"any-workflow-uuid-from-conductor\",\n  \"userId\": \"sivanat-subpaisarn\",\n  \"eventId\": \"invalid-event-id\",\n  \"ticketIds\": [\n    \"1\"\n  ]\n}'"
			},
			"response": []
		},
		{
			"name": "6. Release order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status test\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"response must be valid and have a body\", () => {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"pm.test(\"Response body should match expected success structure\", () =>  {",
							"    let response = pm.response.json();",
							"",
							"    pm.expect(response).to.be.an(\"object\");",
							"",
							"    pm.expect(response).to.have.property(\"code\", 200);",
							"    pm.expect(response).to.have.property(\"message\", \"Tickets released successfully\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "http://localhost:8080/reservations/{{orderId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"reservations",
						"{{orderId}}"
					]
				},
				"description": "Generated from cURL: curl -X 'POST' \\\n  'http://localhost:8080/reservations' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"orderId\": \"any-workflow-uuid-from-conductor\",\n  \"userId\": \"sivanat-subpaisarn\",\n  \"eventId\": \"invalid-event-id\",\n  \"ticketIds\": [\n    \"1\"\n  ]\n}'"
			},
			"response": []
		}
	]
}