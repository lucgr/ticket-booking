/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.66).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ReleaseTicketsResponse;
import io.swagger.model.ReserveTicketsRequest;
import io.swagger.model.ReserveTicketsResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-02-17T20:48:49.358959185Z[GMT]")
@Validated
public interface ReservationsApi {

    @Operation(summary = "Release tickets", description = "Releases all reserved tickets under a given order ID.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Tickets successfully released", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ReleaseTicketsResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad request, invalid data supplied"),
        
        @ApiResponse(responseCode = "404", description = "Order ID not found"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error") })
    @RequestMapping(value = "/reservations/{orderId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<ReleaseTicketsResponse> releaseTickets(@Parameter(in = ParameterIn.PATH, description = "The order ID whose tickets should be released", required=true, schema=@Schema()) @PathVariable("orderId") String orderId
);


    @Operation(summary = "Reserve tickets", description = "Reserves one or more tickets for a user under a specific order.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Reservation successful", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ReserveTicketsResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad request, invalid data supplied"),
        
        @ApiResponse(responseCode = "409", description = "Already exist, seat already reserved"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error") })
    @RequestMapping(value = "/reservations",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ReserveTicketsResponse> reserveTickets(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ReserveTicketsRequest body
);

}

